---

# talk to all hosts just so we can learn about them
- name: Deploy Infrastructure resources
  hosts: localhost
  become: false
  connection: local
  tasks:
    - debug: msg="{{ environ }}_{{ pop }}_{{ cld }}_{{ ops }}_{{ svc }}_{{ distro }}"

    - include_vars: ~/.config/{{ cld }}/vault_{{ pop }}_{{ environ }}.yaml

    - name: launch 'N' instances
      os_server:
        cloud: os_alb # http://docs.openstack.org/developer/os-client-config/
        name: "{{ item.name }}"
        state: present
        key_name: "{{ item.key }}"
        availability_zone: "{{ item.availability_zone }}"
        security_groups: "{{ security_groups }}"
        nics: "{{ item.nics }}"
        image: "{{ item.image }}"
        flavor: "{{ item.flavor }}"
        wait: yes
      with_items: "{{ servers }}"
      #with_sequence: start=1 end="{{ nbofvms }}" format=%02x
      register: "os_hosts"

    - name: create in-memory Inventory # temporary in-memory group of hosts that only persists until the end of the playbook
      add_host:
        name: "{{ item.openstack.name }}"
        groups: "{{ item.item.meta.group }}"
        ansible_host: "{{ item.openstack.accessIPv4 }}"
      with_items: "{{ os_hosts.results }}"

    - name: create static Inventory based on a provided Template ['jinja2'](http://docs.ansible.com/ansible/template_module.html)
      template: 
        src: inventory_template.j2
        dest: "~/son-install/environments/{{ environ }}/hosts"

    - name: 1st Wait for SSH on the Instance
      command: >
        ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ item.openstack.key_name }}.pem -l {{ vm_user }} {{ item.openstack.accessIPv4 }} true
      register: result
      until: result|success
      retries: 20
      delay: 10
      with_items: "{{ os_hosts.results }}"


# APPLY STANDARD CONFIGURATION

- name: deploy COMMON to ALL nodes
  hosts: all
  become: true
  connection: ssh

  pre_tasks:
    - shell: echo 'applying standard configuration'

  roles:
    - { role: common }

  tasks:
    - shell: echo 'still busy'

  post_tasks:
    - shell: echo 'standard configuration applied'


- name: force a reboot to apply (eventual) new kernel
  hosts: all
  become: true
  connection: ssh
  tasks:
    - name: REBOOT ALL VMs
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for server to come back
      local_action: wait_for host={{ ansible_host | default(inventory_hostname) }} port=22 state=started delay=10 timeout=300
      become: false

