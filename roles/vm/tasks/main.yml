---
# tasks file for vm

- name: load variables per Site, Tenant and Distro
  include_vars:
    dir: "{{ localhome }}/roles/{{ plat }}/vars"
    files_matching: "os_{{ pop }}_{{ proj }}_{{ distro }}"

- name: launch Instance(s)
  os_server:
    # http://docs.openstack.org/developer/os-client-config/
    state: present
    cloud: "os_{{ pop }}_{{ proj }}"
    name: "{{ plat }}-{{ pop }}-{{ proj }}-{{ distro }}-{{ item }}-{{ ansible_date_time.epoch }}"
    image: "{{ image }}"
    key_name: "{{ key_name }}"
    flavor: "{{ flavor }}"
    availability_zone: "{{ availability_zone }}"
    security_groups: "{{ security_groups }}"
    meta: "hostname={{ plat }}-{{ item }}-{{ ansible_date_time.epoch }},group={{ plat }}"
    timeout: 360
    wait: yes
  with_sequence: "start=1 end={{ nbofvms }} format=%02x"
  register: "new_vm"

- debug:
    var: new_vm

- name: create IN-MEMORY Inventory # temporary in-memory group of hosts that only persists until the end of the playbook
  add_host:
    name: "{{ item.server.name }}"
    #groups: "{{ item.item.meta.group }}"
    groups: "{{ plat }}"
    ansible_host: "{{ item.server.accessIPv4 }}"
  with_items: "{{ new_vm.results }}"

- name: WAIT the SSH port listening at the new deployed instance
  command: >
    ssh -oControlMaster=auto -oControlPersist=60s -oUserKnownHostsFile=/dev/null -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ item.openstack.key_name }}.pem -l {{ vm_user }} {{ item.openstack.accessIPv4 }} true
  register: result
  until: result|success
  retries: 20
  delay: 10
  with_items: "{{ new_vm.results }}"

